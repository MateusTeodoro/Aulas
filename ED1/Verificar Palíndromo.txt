int eh_palindromo(const char* texto) {
    if (texto == NULL) {
        return 0; // String nula não é palíndromo
    }

    Pilha *p = criar_pilha();
    if (p == NULL) {
        return 0; // Falha ao criar a pilha
    }

    int i;
    int len = strlen(texto);
    char *texto_processado = (char *)malloc(len + 1); // +1 para o terminador nulo
    if (texto_processado == NULL) {
        liberar_pilha(p);
        return 0; // Falha na alocação de memória
    }
    int idx_processado = 0;

    // 1. Pré-processar a string e empilhar os caracteres
    for (i = 0; i < len; i++) {
        if (isalpha(texto[i])) { // Verifica se é uma letra
            char caractere_minusculo = tolower(texto[i]); // Converte para minúsculo
            empilhar(p, caractere_minusculo); // Empilha o caractere (o 'dado' é int, então o ASCII do char serve)
            texto_processado[idx_processado++] = caractere_minusculo; // Armazena no texto processado
        }
    }
    texto_processado[idx_processado] = '\0'; // Adiciona o terminador nulo

    // Se a pilha estiver vazia (a string original não tinha letras),
    // é um palíndromo (string vazia de letras).
    if (p->topo == NULL) {
        liberar_pilha(p);
        free(texto_processado);
        return 1;
    }

    // 2. Comparar caracteres desempilhados com a string original pré-processada
    int caractere_desempilhado;
    for (i = 0; i < idx_processado; i++) {
        if (!desempilhar(p, &caractere_desempilhado)) {
            // Isso não deveria acontecer se o empilhamento foi bem-sucedido
            liberar_pilha(p);
            free(texto_processado);
            return 0; // Erro inesperado
        }

        if (caractere_desempilhado != texto_processado[i]) {
            liberar_pilha(p);
            free(texto_processado);
            return 0; // Não é um palíndromo
        }
    }

    // 3. Liberar a pilha e a memória do texto processado
    liberar_pilha(p);
    free(texto_processado);

    // 4. Retornar 1 se for palíndromo
    return 1;
}